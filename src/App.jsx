import React, { Component } from 'react'
import { DevView } from './commons/index.js'
import 'babel-polyfill'
import AppHeader from './Header.jsx'
import AppFooter from './Footer.jsx'
import {
  AppProvider, AppConsumer, appContext
} from './contexts/AppContext'
import "../static/assets/styles/application.scss"

const ProviderWrapper = ({ contexts, children, globalProps }) => contexts.reduce(
  (prev, context) => React.createElement(context, {
    children: prev,
    globalProps: globalProps
  }),
  children
);

class App extends Component {

  constructor(props) {
    super(props)
  }

  render() {
    const { appProps } = this.props;

    return (
      <ProviderWrapper contexts={[AppProvider]} globalProps={{
        params: appProps.params,
      }}>
        <div className="app-container">
          {!this.props.hideHeader && <AppHeader />}
          {this.props.children}
          {!this.props.hideFooter && <AppFooter />}
          {(!process.env.NODE_ENV || process.env.NODE_ENV === 'development') ?
            <DevView props={appProps} /> : null}
        </div>
      </ProviderWrapper>
    )
  }
}

export default App;

// do not wrap context api HOC consumer over App.jsx or page component (component generated by 'rails g react excontroller exindex').
// Only apply them to child components of each page component.
// then you can access context form any level of deepness.

// Sample Context configured child Component (should be children of any react page component)
/*
import React, { Component } from 'react'
import {
  AppProvider, AppConsumer, appContext
} from '~/path/for/AppContext'

class ContextSampleComponent extends Component {

  toggleSample = () => {
    this.props.appActions.setSampleData(!this.props.appState.sampleData)
  }

  render() {
    return(
        <div>
            <p>{JSON.stringify(this.props.appState.sampleData)}</p>
            <button onClick={this.toggleSample}>toggle appContext global data</button>
        </div>
    )
  }
}

export default appContext(ContextSampleComponent)
*/